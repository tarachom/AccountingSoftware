static string print_array(string[] arr)
        {
            bool is_first = true;

            string concat = "{";

            foreach (string e in arr)
            {
                if (!is_first)
                    concat += ", ";
                 else
                    is_first = false;

                concat += e;
            }

            concat += "}";

            return concat;
        }



    class MyGenericClass<T>
    {
        public void genericMethod(T[] genericParameter)
        {
            

            foreach (T a in genericParameter)
            {
                Console.WriteLine(a);
            }

        }
    }

    class MyGenericClass2<T> where T : class
    {
        public T genericMethod<U>(T genericParameter, U par2)
        {
            Console.WriteLine("Generic Parameter of type {0}, value {1}", typeof(T).ToString(), genericParameter);

            U c = par2;
                        
            return null;
        }
    }

    struct rrr {
        string a;
    }

    MyGenericClass2<object> myGenericClass2 = new MyGenericClass2<object>();
    myGenericClass2.genericMethod<string>("wrwqe", "sdfs");


            string[] mas_a = new string[] { "a", "b" };
    int[] mas_b = new int[] { 1, 2, 3 };

    MyGenericClass<string> a = new MyGenericClass<string>();
    a.genericMethod(mas_a);