public static void Comparison(string pathToSaveReport, Configuration Conf, ConfigurationInformationSchema InformationSchema)
        {
            XmlDocument xmlComparisonDocument = new XmlDocument();
            xmlComparisonDocument.AppendChild(xmlComparisonDocument.CreateXmlDeclaration("1.0", "utf-8", ""));

            XmlElement rootNode = xmlComparisonDocument.CreateElement("Comparison");
            xmlComparisonDocument.AppendChild(rootNode);

            ComparisonSaveInformationSchema(InformationSchema, xmlComparisonDocument, rootNode);

            //Таблиці
            foreach (KeyValuePair<string, ConfigurationDirectories> ConfDirectory in Conf.Directories)
            {
                //Назва таблиці в базі даних
                string tableName = ConfDirectory.Value.Table;

                if (InformationSchema.Tables.ContainsKey(tableName))
                {
                    //Поля
                    foreach (KeyValuePair<string, ConfigurationObjectField> ConfDirectoryField in ConfDirectory.Value.Fields)
                    {
                        //Назва поля в базі данихConfigurationObjectField
                        string fieldName = ConfDirectoryField.Key.ToLower();

                        if (InformationSchema.Tables[tableName].Columns.ContainsKey(fieldName))
                        {
                            ConfigurationInformationSchema_Column InformationSchemaColumn = InformationSchema.Tables[tableName].Columns[fieldName];

                            string configurationFieldType = ConfDirectoryField.Value.Type;
                            string dataType = ComparisonGetDataType(ConfDirectoryField.Value.Type);

                            string informationSchemaDataType = InformationSchemaColumn.DataType;
                            string informationSchemaUdtName = InformationSchemaColumn.UdtName;

                            ComparisonTransformDataType(tableName, dataType,
                                informationSchemaDataType, informationSchemaUdtName,
                                ConfDirectoryField.Value, xmlComparisonDocument, rootNode);
                        }
                        else
                        {
                            string dataType = ComparisonGetDataType(ConfDirectoryField.Value.Type);
                            ComparisonSaveAddColumn(tableName, dataType, ConfDirectoryField.Value, xmlComparisonDocument, rootNode);
                        }
                    }
                }
                else
                {
                    ComparisonSaveCreateTable(tableName, ConfDirectory.Value.Fields, xmlComparisonDocument, rootNode);
                }

                foreach (KeyValuePair<string, ConfigurationObjectTablePart> tablePart in ConfDirectory.Value.TabularParts)
                {
                    string tablePartName = tablePart.Value.Table;

                    if (InformationSchema.Tables.ContainsKey(tablePartName))
                    {
                        foreach (KeyValuePair<string, ConfigurationObjectField> tablePartField in tablePart.Value.Fields)
                        {
                            string fieldName = tablePartField.Key.ToLower();
                            Console.WriteLine(fieldName);

                            if (InformationSchema.Tables[tablePartName].Columns.ContainsKey(fieldName))
                            {
                                ConfigurationInformationSchema_Column InformationSchemaColumn =
                                InformationSchema.Tables[tablePartName].Columns[fieldName];

                                string confType = tablePartField.Value.Type;

                                string baseType = InformationSchemaColumn.DataType;
                                string baseType2 = InformationSchemaColumn.UdtName;

                                //Перевірка типу
                            }
                            else
                            {
                                //ComparisonSaveAlterTable(tablePartName, tablePartField.Value, xmlComparisonDocument, rootNode);
                            }
                        }
                    }
                    else
                    {
                        ComparisonSaveCreateTable(tablePartName, tablePart.Value.Fields, xmlComparisonDocument, rootNode);
                    }
                }
            }

            xmlComparisonDocument.Save(pathToSaveReport);
        }

        private static void ComparisonTransformDataType(string tableName, string dataType,
            string informationSchemaDataType, string informationSchemaUdtName,
            ConfigurationObjectField field, XmlDocument xmlComparisonDocument, XmlElement rootNode)
        {
            string configurationFieldType = field.Type;

            if (informationSchemaDataType == "text" && informationSchemaUdtName == "text")
            {
                if (configurationFieldType == "string")
                {
                    //ok
                }
                else if (configurationFieldType == "string[]")
                {
                    
                    ComparisonSaveRenameColumn(tableName, field.Name, field.Name + "_OLD", xmlComparisonDocument, rootNode);
                    ComparisonSaveAddColumn(tableName, dataType, field, xmlComparisonDocument, rootNode);
                    ComparisonSaveCopyDataColumn(tableName, field.Name + "_OLD", field.Name, xmlComparisonDocument, rootNode);

                }
                else
                {
                    //error
                }
            }

            if (informationSchemaDataType == "ARRAY" && informationSchemaUdtName == "_text")
            {
                if (configurationFieldType == "string[]")
                {
                    //ok
                }
                else if (configurationFieldType == "string")
                {
                    //1. Переназвати стовпчик в fieldName_OLD
                    //2. Створити новий стовпчик з назвою fieldName з типом string[]
                    //3. Скопіювати дані з fieldName_OLD в fieldName
                }
                else
                {
                    //error
                }
            }

            if (informationSchemaDataType == "integer" && informationSchemaUdtName == "int4")
            {
                if (configurationFieldType == "integer")
                {
                    //ok
                }
                else if (configurationFieldType == "integer[]")
                {
                    //1. Переназвати стовпчик в fieldName_OLD
                    //2. Створити новий стовпчик з назвою fieldName з типом string[]
                    //3. Скопіювати дані з fieldName_OLD в fieldName
                }
                else
                {
                    //error
                }
            }

            if (informationSchemaDataType == "ARRAY" && informationSchemaUdtName == "_int4")
            {
                if (configurationFieldType == "integer[]")
                {
                    //ok
                }
                else if (configurationFieldType == "integer")
                {
                    //1. Переназвати стовпчик в fieldName_OLD
                    //2. Створити новий стовпчик з назвою fieldName з типом string[]
                    //3. Скопіювати дані з fieldName_OLD в fieldName
                }
                else
                {
                    //error
                }
            }

            if (informationSchemaDataType == "numeric" && informationSchemaUdtName == "numeric")
            {
                if (configurationFieldType == "numeric")
                {
                    //ok
                }
                else if (configurationFieldType == "numeric[]")
                {
                    //1. Переназвати стовпчик в fieldName_OLD
                    //2. Створити новий стовпчик з назвою fieldName з типом string[]
                    //3. Скопіювати дані з fieldName_OLD в fieldName
                }
                else
                {
                    //error
                }
            }

            if (informationSchemaDataType == "ARRAY" && informationSchemaUdtName == "_numeric")
            {
                if (configurationFieldType == "numeric[]")
                {
                    //ok
                }
                else if (configurationFieldType == "numeric")
                {
                    //1. Переназвати стовпчик в fieldName_OLD
                    //2. Створити новий стовпчик з назвою fieldName з типом string[]
                    //3. Скопіювати дані з fieldName_OLD в fieldName
                }
                else
                {
                    //error
                }
            }

            if (informationSchemaDataType == "boolean" && informationSchemaUdtName == "bool")
            {
                if (configurationFieldType == "boolean")
                {
                    //ok
                }
                else
                {
                    //error
                }
            }

            if (informationSchemaDataType == "date" && informationSchemaUdtName == "date")
            {
                if (configurationFieldType == "date")
                {
                    //ok
                }
                else
                {
                    //error
                }
            }

            if (informationSchemaDataType == "time without time zone" && informationSchemaUdtName == "time")
            {
                if (configurationFieldType == "time")
                {
                    //ok
                }
                else
                {
                    //error
                }
            }

            if (informationSchemaDataType == "timestamp without time zone" && informationSchemaUdtName == "timestamp")
            {
                if (configurationFieldType == "datetime")
                {
                    //ok
                }
                else
                {
                    //error
                }
            }

            if (informationSchemaDataType == "uuid" && informationSchemaUdtName == "uuid")
            {
                if (configurationFieldType == "pointer")
                {
                    //ok
                }
                else
                {
                    //error
                }
            }

            
        }

        private static string ComparisonGetDataType(string configurationFieldType)
        {
            switch (configurationFieldType)
            {
                case "string": return "text";
                case "string[]": return "text[]";
                case "integer": return "integer";
                case "integer[]": return "integer[]";
                case "numeric": return "numeric";
                case "numeric[]": return "numeric[]";
                case "boolean": return "boolean";
                case "date": return "date";
                case "time": return "time without time zone";
                case "datetime": return "timestamp without time zone";
                case "pointer": return "uuid";
                default:
                    throw new Exception("Не оприділений тип даних конфігурації");
            }
        }

        private static void ComparisonFields(Dictionary<string, ConfigurationObjectField> fields, XmlDocument xmlComparisonDocument, XmlElement rootNode)
        {
            foreach (KeyValuePair<string, ConfigurationObjectField> field in fields)
            {
                ComparisonField(field.Value, xmlComparisonDocument, rootNode);
            }
        }

        private static void ComparisonField(ConfigurationObjectField field, XmlDocument xmlComparisonDocument, XmlElement rootNode)
        {
            XmlElement nodeField = xmlComparisonDocument.CreateElement("Field");
            rootNode.AppendChild(nodeField);

            XmlElement nodeFieldName = xmlComparisonDocument.CreateElement("Name");
            nodeFieldName.InnerText = field.Name;
            nodeField.AppendChild(nodeFieldName);

            XmlElement nodeFieldType = xmlComparisonDocument.CreateElement("Type");
            nodeFieldType.InnerText = field.Type;
            nodeField.AppendChild(nodeFieldType);

            XmlElement nodeFieldDataType = xmlComparisonDocument.CreateElement("DataType");
            nodeFieldDataType.InnerText = ComparisonGetDataType(field.Type);
            nodeField.AppendChild(nodeFieldDataType);
        }

        private static void ComparisonSaveInformationSchema(ConfigurationInformationSchema InformationSchema, XmlDocument xmlComparisonDocument, XmlElement rootNode)
        {
            XmlElement nodeInformationSchema = xmlComparisonDocument.CreateElement("InformationSchema");
            rootNode.AppendChild(nodeInformationSchema);

            foreach (KeyValuePair<string, ConfigurationInformationSchema_Table> informationSchemaTable in InformationSchema.Tables)
            {
                XmlElement nodeInformationSchemaTable = xmlComparisonDocument.CreateElement("Table");
                nodeInformationSchema.AppendChild(nodeInformationSchemaTable);

                XmlElement nodeInformationSchemaTableName = xmlComparisonDocument.CreateElement("Name");
                nodeInformationSchemaTableName.InnerText = informationSchemaTable.Value.TableName;
                nodeInformationSchemaTable.AppendChild(nodeInformationSchemaTableName);

                foreach (KeyValuePair<string, ConfigurationInformationSchema_Column> informationSchemaColumn in informationSchemaTable.Value.Columns)
                {
                    XmlElement nodeInformationSchemaColumn = xmlComparisonDocument.CreateElement("Column");
                    nodeInformationSchemaTable.AppendChild(nodeInformationSchemaColumn);

                    XmlElement nodeInformationSchemaColumnName = xmlComparisonDocument.CreateElement("Name");
                    nodeInformationSchemaColumnName.InnerText = informationSchemaColumn.Value.ColumnName;
                    nodeInformationSchemaColumn.AppendChild(nodeInformationSchemaColumnName);

                    XmlElement nodeInformationSchemaColumnDataType = xmlComparisonDocument.CreateElement("DataType");
                    nodeInformationSchemaColumnDataType.InnerText = informationSchemaColumn.Value.DataType;
                    nodeInformationSchemaColumn.AppendChild(nodeInformationSchemaColumnDataType);

                    XmlElement nodeInformationSchemaColumnUdtName = xmlComparisonDocument.CreateElement("UdtName");
                    nodeInformationSchemaColumnUdtName.InnerText = informationSchemaColumn.Value.UdtName;
                    nodeInformationSchemaColumn.AppendChild(nodeInformationSchemaColumnUdtName);
                }
            }
        }

        private static void ComparisonSaveCreateTable(string tableName, Dictionary<string, ConfigurationObjectField> fields, XmlDocument xmlComparisonDocument, XmlElement rootNode)
        {
            XmlElement createTableNode = xmlComparisonDocument.CreateElement("CreateTable");
            rootNode.AppendChild(createTableNode);

            XmlElement createTableNameNode = xmlComparisonDocument.CreateElement("Name");
            createTableNameNode.InnerText = tableName;
            createTableNode.AppendChild(createTableNameNode);

            ComparisonFields(fields, xmlComparisonDocument, createTableNode);
        }

        private static void ComparisonSaveAddColumn(string tableName, string dataType, ConfigurationObjectField field, XmlDocument xmlComparisonDocument, XmlElement rootNode)
        {
            //ALTER TABLE distributors ADD COLUMN address varchar(30);

            XmlElement nodeTable = xmlComparisonDocument.CreateElement("AddColumn");
            rootNode.AppendChild(nodeTable);

            XmlElement nodeTableName = xmlComparisonDocument.CreateElement("TableName");
            nodeTableName.InnerText = tableName;
            nodeTable.AppendChild(nodeTableName);

            XmlElement nodeField = xmlComparisonDocument.CreateElement("Field");
            nodeTable.AppendChild(nodeField);

            XmlElement nodeFieldName = xmlComparisonDocument.CreateElement("Name");
            nodeFieldName.InnerText = field.Name;
            nodeField.AppendChild(nodeFieldName);

            XmlElement nodeFieldType = xmlComparisonDocument.CreateElement("Type");
            nodeFieldType.InnerText = field.Type;
            nodeField.AppendChild(nodeFieldType);

            XmlElement nodeFieldDataType = xmlComparisonDocument.CreateElement("DataType");
            nodeFieldDataType.InnerText = dataType;
            nodeField.AppendChild(nodeFieldDataType);
        }

        private static void ComparisonSaveRenameColumn(string tableName, string fieldName, string newFieldName, XmlDocument xmlComparisonDocument, XmlElement rootNode)
        {
            //ALTER TABLE public.test RENAME uid TO uid2;

            XmlElement ColumnNode = xmlComparisonDocument.CreateElement("RenameColumn");
            rootNode.AppendChild(ColumnNode);

            XmlElement TableNameNode = xmlComparisonDocument.CreateElement("TableName");
            TableNameNode.InnerText = tableName;
            ColumnNode.AppendChild(TableNameNode);

            XmlElement FieldNode = xmlComparisonDocument.CreateElement("Field");
            ColumnNode.AppendChild(FieldNode);

            XmlElement FieldNameNode = xmlComparisonDocument.CreateElement("Name");
            FieldNameNode.InnerText = fieldName;
            FieldNode.AppendChild(FieldNameNode);

            XmlElement FieldNewNameNode = xmlComparisonDocument.CreateElement("NewName");
            FieldNewNameNode.InnerText = newFieldName;
            FieldNode.AppendChild(FieldNewNameNode);
        }

        private static void ComparisonSaveAlterColumn(string tableName, string dataType, ConfigurationObjectField field, XmlDocument xmlComparisonDocument, XmlElement rootNode)
        {
            XmlElement alterTableNode = xmlComparisonDocument.CreateElement("AlterColumn");
            rootNode.AppendChild(alterTableNode);

            XmlElement alterTableNameNode = xmlComparisonDocument.CreateElement("TableName");
            alterTableNameNode.InnerText = tableName;
            alterTableNode.AppendChild(alterTableNameNode);

            XmlElement nodeField = xmlComparisonDocument.CreateElement("Field");
            rootNode.AppendChild(nodeField);

            XmlElement nodeFieldName = xmlComparisonDocument.CreateElement("Name");
            nodeFieldName.InnerText = field.Name;
            nodeField.AppendChild(nodeFieldName);

            XmlElement nodeFieldType = xmlComparisonDocument.CreateElement("Type");
            nodeFieldType.InnerText = field.Type;
            nodeField.AppendChild(nodeFieldType);

            XmlElement nodeFieldDataType = xmlComparisonDocument.CreateElement("DataType");
            nodeFieldType.InnerText = dataType;
            nodeField.AppendChild(nodeFieldDataType);
        }

        private static void ComparisonSaveCopyDataColumn(string tableName, string fieldNameSource, string fieldNameDestination, XmlDocument xmlComparisonDocument, XmlElement rootNode)
        {
            XmlElement ColumnNode = xmlComparisonDocument.CreateElement("CopyDataColumn");
            rootNode.AppendChild(ColumnNode);

            XmlElement TableNameNode = xmlComparisonDocument.CreateElement("TableName");
            TableNameNode.InnerText = tableName;
            ColumnNode.AppendChild(TableNameNode);

            XmlElement FieldNode = xmlComparisonDocument.CreateElement("Field");
            ColumnNode.AppendChild(FieldNode);

            XmlElement FieldNameNode = xmlComparisonDocument.CreateElement("NameSource");
            FieldNameNode.InnerText = fieldNameSource;
            FieldNode.AppendChild(FieldNameNode);

            XmlElement FieldNewNameNode = xmlComparisonDocument.CreateElement("NameDestination");
            FieldNewNameNode.InnerText = fieldNameDestination;
            FieldNode.AppendChild(FieldNewNameNode);
        }

        //ALTER TABLE public.test DROP COLUMN num;